##[include moonraker_obico_macros.cfg]
##[include shell_command.cfg]
##[include mainsail.cfg]
##[virtual_sdcard]

path: /home/ender5/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[mcu]
serial: /dev/serial/by-id/usb-klipper_stm32g0b1xx_480035000B504B5735313920-if00
##/dev/ttyAMA0
##serial/by-id/<your-mcu-id>

##[virtual_sd_card]
path: /home/ender5/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

##[printer]
kinematics: none
max_velocity: 1000
max_accel: 1000
[pause_resume]

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[gcode_arcs]

[printer]
kinematics: cartesian
max_velocity: 250
max_accel: 6000
max_accel_to_decel: 6000
max_z_velocity: 10
max_z_accel: 100
square_corner_velocity: 20

#-------------------------------------
# Bed Leveling
#-------------------------------------

[bltouch]
sensor_pin: ^PC2
control_pin: PA1
pin_move_time: 0.675
stow_on_each_sample: false
probe_with_touch_mode: true
pin_up_touch_mode_reports_triggered: false
speed: 100
lift_speed: 200
samples: 3
sample_retract_dist: 10
samples_tolerance_retries: 4
x_offset: 0
y_offset: -9
z_offset: 0

[bed_mesh]
speed: 100
horizontal_move_z: 10
probe_count: 3,3
algorithm: bicubic
mesh_min: 0,0
mesh_max: 330,330

[screws_tilt_adjust]
screw1: 58,50
screw1_name: front_left
screw2: 355,50
screw2_name: front_right
screw3: 58,315
screw3_name: back_left
screw4: 355,315
screw4_name: back_right

[safe_z_home]
speed: 100
z_hop: 10
z_hop_speed: 100
home_xy_position: 180,175

[fan]
pin: PC6
max_power: 1.0
cycle_time: 0.0001
hardware_pwm: false
kick_start_time: 0.333
off_below: 0.05

[heater_fan hotend_fan]
pin: PC7
max_power: 1.0
fan_speed: 1.0
heater: extruder
heater_temp: 50.0

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
max_temp: 100

[heater_bed]
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F # Creality bed thermistor
sensor_pin: PC4
min_temp: 0
max_temp: 125
control: pid # These settings are pretty accurate for me, try them first
pid_Kp: 131.06
pid_Ki: 11.79
pid_Kd: 971.23

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
endstop_pin: tmc2209_stepper_x:virtual_endstop
rotation_distance: 40 # pitch 2mm, teeth 20
full_steps_per_rotation: 200
microsteps: 16
homing_speed: 50
position_min: 0
position_max: 360
position_endstop: 360

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
endstop_pin: tmc2209_stepper_y:virtual_endstop
homing_retract_dist: 0
rotation_distance: 40 # pitch 2mm, teeth 20?
full_steps_per_rotation: 200
microsteps: 16
homing_speed: 50
position_min: 0
position_max: 365
position_endstop: 365

[stepper_z]
step_pin: PB0
dir_pin: !PC5
enable_pin: !PB1
endstop_pin: probe:z_virtual_endstop
rotation_distance: 4 # pitch 2mm, threads 2
full_steps_per_rotation: 200
microsteps: 16
position_min: -5
position_max: 420

#-------------------------------------
# Extruder: Bondtech BMG
#-------------------------------------
[extruder]
step_pin: PB3
# dir_pin: PB4 # Bowden style
dir_pin: !PB4 # Direct drive (reverse the motor)
enable_pin: !PD1
microsteps: 16
rotation_distance: 7.711 # Marlin steps_per_mm = 415
nozzle_diameter: 0.400
filament_diameter: 1.750
max_power: 1.0
heater_pin: PC8
# sensor_type: EPCOS 100K B57560G104F # Creality hotend thermistor
sensor_type: ATC Semitec 104GT-2 # Slice Engineering 300C thermistor
sensor_pin: PA0
min_temp: 0
max_temp: 300
min_extrude_temp: 180
max_extrude_only_velocity: 150.0
max_extrude_only_accel: 4000.0
control: pid
pid_Kp: 22.507
pid_Ki: 1.340
pid_Kd: 94.527

# ---------- X Stepper ----------
# Creality 42-34, 0.8A peak RMS (per phase)
# -------------------------------
[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
diag_pin: PC0
driver_SGTHRS: 100
uart_address: 0
interpolate: true
sense_resistor: 0.110
run_current: 0.45
stealthchop_threshold: 999999

# ---------- Y Stepper ----------
# Creality 42-48, 1.0A peak RMS (per phase)
# -------------------------------
[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
diag_pin: PC1
driver_SGTHRS: 110
uart_address: 2
interpolate: true
sense_resistor: 0.110
run_current: 0.57
stealthchop_threshold: 999999

# ---------- Z Stepper ----------
# Creality 42-34, 0.8A peak RMS (per phase)
# -------------------------------
[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
interpolate: true
sense_resistor: 0.110
run_current: 0.48
stealthchop_threshold: 999999

# ---------- E Stepper ----------
# Bondtech NEMA17 Pancake Stepper (22mm) 0.7A peak RMS (per phase)
# https://www.bondtech.se/product/nema17-pancake-stepper-25mm/
# -------------------------------
[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
interpolate: true
run_current: 0.40 # 0.49
hold_current: 0.31
stealthchop_threshold: 999999

#-------------------------------------
# Additional Macros
#-------------------------------------
[gcode_macro G29]
gcode:
  BED_MESH_CALIBRATE

[gcode_macro PRINT_START]
gcode:
    {% set intro_x = printer.configfile.config["stepper_x"]["position_max"]|float * 0.66 %}
    {% set min_x = printer.configfile.config["stepper_x"]["position_min"]|float * 0.1 %}
    {% set min_y = printer.configfile.config["stepper_y"]["position_min"]|float %}
    {% set BED = params.BED|default(60)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(205)|float %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED} ; final bed temp
    M190 S{BED} ; Wait to heat bed
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=160 ; initial ext temp to avoid oozing
    G21 ; set to mm
    M220 S100 ; print speed 100%
    M221 S100 ; flow rate 100%
    M107 ; disable fans
    G90 ; use absolute positioning
    G28 ; home
    BED_MESH_CALIBRATE
    G1 X{min_x} Y{min_y} F5000 ; zero x,y
    G1 Z5 F240
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER} ; final extruder temp
    M109 S{EXTRUDER} ; Wait to heat extruder
    PRIME_NOZZLE

[gcode_macro PRINT_END]
gcode:
    {% set intro_x = printer.configfile.config["stepper_x"]["position_max"]|float * 0.66 %}
    {% set min_x = printer.configfile.config["stepper_x"]["position_min"]|float * 0.1 %}
    {% set min_y = printer.configfile.config["stepper_y"]["position_min"]|float %}
    G1 X{min_x} Y{min_y} F5000 ; move to min
    TURN_OFF_HEATERS
    M107 ; disable fans
    M84 X Y E ; disable motors x,y,e

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    M107 ; disable fans
    M84 X Y E ; disable motors x,y,e

[gcode_macro PRIME_NOZZLE]
gcode:
    {% set intro_x = printer.configfile.config["stepper_x"]["position_max"]|float * 0.66 %}
    {% set min_x = printer.configfile.config["stepper_x"]["position_min"]|float * 0.1 %}
    {% set min_y = printer.configfile.config["stepper_y"]["position_min"]|float %}
    M83 ; extruder relative mode
    G92 E0
    G1 X{min_x} Y{min_y} Z0.3 F5000 ; move to start position
    G1 X{intro_x} Y{min_y} Z0.3 F1500.0 E15 ; draw first line
    G92 E0
    G1 X{intro_x} Y{min_y + 0.3} Z0.3 F5000 ; move over
    G1 X{min_x / 2} Y{min_y + 0.3} Z0.3 F1500 E35 ; draw second line
    G91 E0

##[virtual_sdcard]
##path: ~/printer_data/gcodes
##on_error_gcode: CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
  {% endif %}
  
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

  [respond]
[gcode_macro _OBICO_LAYER_CHANGE]
description:Run a scan across the current print area
variable_current_layer: -1
variable_first_layer_scan_enabled: True
variable_first_layer_scan_stepover: 10     #Y Value stepover
variable_first_layer_scan_feedrate: 600
variable_first_layer_scan_zhop: 4          #mm to zhop
variable_first_layer_scan_retract: 6.5
variable_first_layer_scanning: False
gcode:
  SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=current_layer VALUE={params.CURRENT_LAYER|int}
  {% if first_layer_scan_enabled and params.CURRENT_LAYER|int == 2 %}
    SAVE_GCODE_STATE NAME=current_print_state
    {% set current_x = printer.toolhead.position.x %}
    {% set current_y = printer.toolhead.position.y %}

    {% if first_layer_scan_retract > 0 and printer[printer.toolhead.extruder].can_extrude %}
        M83     ; insure relative extrusion
        G0 E-{first_layer_scan_retract} F900
    {% endif %}

    SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=True
    G91
    G0 Z{first_layer_scan_zhop} F1000
    G90
    {% if 'MINX' in params and 'MAXX' in params and 'MINY' in params and 'MAXY' in params %}
      {% set stepoverCount = ((params.MAXY|float - params.MINY|float) / first_layer_scan_stepover) | round(method='ceil') | int %}
      G0 X{params.MINX} Y{params.MINY} F{first_layer_scan_feedrate}
      {% for ystep in range(stepoverCount) %}
        G0 Y{params.MINY|float + first_layer_scan_stepover * ystep}
        {% if ystep % 2 == 0 %}
          G0 X{params.MAXX} F{first_layer_scan_feedrate}
        {% else %}
          G0 X{params.MINX} F{first_layer_scan_feedrate}
        {% endif %}
      {% endfor %}
    {% endif %} #end if params specified
    #go back to original
    G0 X{current_x} Y{current_y} F{first_layer_scan_feedrate}
    G91
    G0 Z-{first_layer_scan_zhop} F1000

    {% if first_layer_scan_retract > 0 and printer[printer.toolhead.extruder].can_extrude %}
      G0 E{first_layer_scan_retract} F900
    {% endif %}

    RESTORE_GCODE_STATE NAME=current_print_state
    SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=False
  {% endif %} #end if first_layer_scan_enabled and params.CURRENT_LAYER == 2

command: echo hello world
timeout: 2.
verbose: True
[gcode_macro HELLO_WORLD]
gcode:
    RUN_SHELL_COMMAND CMD=hello_world